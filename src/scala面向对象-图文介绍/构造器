    ##详细见this_xiti2##
    在scala中，我们可以使用更简洁的语法来实现如下scala构造器语法：
1.1 主构造器的定义
class 类名(var/val 参数名:类型 = 默认值, var/val 参数名:类型 = 默认值){
    // 构造代码块
}

主构造器的参数列表是直接定义在类名后面，添加了val/var表示直接通过主构造器定义成员变量,特别注意这里val/var不可省略。
构造器参数列表可以指定默认值
创建实例，调用构造器可以指定字段进行初始化
整个class中除了字段定义和方法定义的代码都是构造代码
特别注意:主构造器可以使用默认的，不用显示定义。class Person(){} 与class Person{}一样，scala（）可以省略。都是带默认主构造的。

2.辅助构造器
在scala中，除了定义主构造器外，还可以根据需要来定义辅助构造器。例如：允许通过多种方式，来创建对象，这时候就可以定义其他更多的构造器。我们把除了主构造器之外的构造器称为辅助构造器。

2.1辅助构造器语法

定义辅助构造器与定义方法一样，也使用def关键字来定义
注意这里辅助构造器参数定义跟主构造器不一样，省略了var/val
这个方法的名字为this
特别注意：辅助构造器的第一行代码，必须要调用主构造器或者其他辅助构造器

def this(参数名:类型, 参数名:类型) {
    // 第一行需要调用主构造器或者其他构造器
    // 构造器代码
}

###
主构造器（Primary Constructor）：
主构造器是直接定义在类名后面的，它的参数列表可以带有默认值。主构造器的参数直接被用来定义类的成员变量，并且添加了var或val关键字后，这些参数就会成为类的成员变量，可供类的其他方法使用。
主构造器可以使用默认的，不用显式地定义。例如，class Person()和class Person都是带有默认主构造器的。

示例：
class Person(var name: String = "Unknown", var age: Int = 0) {
  // 构造代码块，直接在类名后面定义了两个成员变量name和age
  println(s"创建了一个名为 $name 的人，年龄为 $age 岁")
}
辅助构造器（Auxiliary Constructor）：
辅助构造器是在类内部用def关键字定义的方法，它的参数列表省略了var或val关键字。辅助构造器用来创建类的实例，允许通过不同的参数组合来构造对象。
辅助构造器的第一行代码必须调用主构造器或其他辅助构造器，以确保在构造对象时正确初始化成员变量。

示例：
class Person(var name: String, var age: Int) {
  def this(name: String) {
    // 辅助构造器1，只传入姓名参数，年龄默认为0
    this(name, 0)
  }
  def this(age: Int) {
    // 辅助构造器2，只传入年龄参数，姓名默认为"Unknown"
    this("Unknown", age)
  }
  def this() {
    // 辅助构造器3，没有传入任何参数，姓名默认为"Unknown"，年龄默认为0
    this("Unknown", 0)
  }
  // 构造代码块，直接在类名后面定义了两个成员变量name和age
  println(s"创建了一个名为 $name 的人，年龄为 $age 岁")
}
在这个示例中，我们定义了一个名为Person的类，它有一个主构造器和三个辅助构造器。主构造器的参数列表直接定义在类名后面，用于定义成员变量。辅助构造器分别提供了不同的参数组合来构造对象。