Scala由两种类型变量  可变和不可变
声明变量的关键词由三种
val 声明的对象是不可变的
var 声明的对象是可变
lazy val 变量只被计算一次 在该变量第一次被访问时

和java不同的是 在scala中 这些类型都是"类"并且都是包scala的成员
比如，Int的全名是scala.Int.对于字符串scala用java.lang.String类来表示字符串

基本数据类型：
Byte：8位有符号补码整数。范围为 -128 到 127。
Short：16位有符号补码整数。范围为 -32768 到 32767。
Int：32位有符号补码整数。范围为 -2147483648 到 2147483647。
Long：64位有符号补码整数。范围为 -9223372036854775808 到 9223372036854775807。
Float：32位IEEE754单精度浮点数。范围为 1.40129846432481707e-45 到 3.40282346638528860e+38，且具有有效位数为 6-7 位。
Double：64位IEEE754单精度浮点数。范围为 4.94065645841246544e-324d 到 1.79769313486231570e+308d，且具有有效位数为 15 位。
Char：16位无符号Unicode字符。范围为 U+0000 到 U+FFFF。
Boolean：布尔值，true或false。
字符串类型：
String：字符串类型，由字符组成的不可变序列。

操作符  在scala中 可使用加(+) 减(-) 乘(*)  除(/) 余数(%) 等操作符 而且这些操作符是方法
例如 5+3和(5).+(3)是等价的  也就是说
a 方法 b 等价于 a.方法(b)
val sum = 5 + 3 //实际上调用了(5).+3
sum: Int=8
val sum1=(5).+3 //可以发现，写成方法调用的形式 和上面得到相同的结果
sum1: Int=8

和java不同 在scala中并没有提供++和--操作符当需要递增和递减时候 可用使用下面表达式
var i =5
i+=1
println(i)

富包装类
对于基本数据类型 除了以上提到的各种操作符号，Scala还提供了许多常用 运算的方法 知识这些方法的不是再基本类里面定义 还是被封装到一个对应的富包装类中
每个基本类型都有一个对应的富包装类 例如Int有一个RichInt类、String有一个RichString类，这些类位于包scala.runtime中
当对一个基本数据类型的对象调用其富包装类提供的方法 scala会自动通过隐式转换将该对象转换为对应的富包装类类型 然后在调用相应的方法 例如3 max 5

Range
在执行for循环时候，我们经常会用到数值序列 就比如 i的值是从1循环到5，这时候就可以采用Range来实现
Range可以支持创建不同数据类型的数值序列 包括Int、Long、Float、Double、Char、BigInt和BigDecimal等

创建一个从1到5的数值序列 包含区间终点5，步长为1
1 to 5 等价于1.to(5)





集合类型：
Array：数组，可以存储固定大小的相同类型元素序列。
List：列表，可以存储不同类型的元素序列，列表的长度可以动态改变。
Set：集合，存储独特元素的无序容器。
Map：映射，存储键值对的无序容器。

元组类型：
Tuple：元组，可以存储不同类型的固定数量元素的有序集合。

选项类型：
Option：选项类型，用于表示可能存在或可能不存在的值。可以是Some（存在值）或None（不存在值）。

函数类型：
FunctionN：函数类型，表示具有N个参数和一个返回值的函数。例如，Function1表示一个带有一个参数的函数。

类型别名：
type关键字用于创建类型别名，使得我们可以为现有类型定义一个新的名称。

类和对象类型：
类和对象是Scala中的重要概念。类表示具有属性和行为的抽象数据类型，而对象是类的实例。

自定义数据类型：
可以使用class关键字创建自定义类，使用trait关键字创建特质（类似于Java中的接口），还可以使用enum关键字创建枚举类型。












zhou200488