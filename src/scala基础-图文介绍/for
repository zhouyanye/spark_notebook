for(变量 <-表达式 )语句块
其中“变量 <-表达式”被称为生成器
  for (i <-1 to 5 ) println(i)

  for(i < -1 to 5 by 2) println(i)  // 1 3 5

不希望打印出所有的结果 过滤出一些满足指定条件的结果  需要使用到称为 守卫模式的表达式

只输出1到5之中的所有偶数
for(i <-1 to 5 if i%2==0) println(i)

scala也支持多个生成器的情形 可以用分号给它们隔开 比如说
for(i<-1 to 5; j<-1 to 3)println(i*j)

可以每个生成器添加一个守卫
for(i<-1 to 5 if i%2==0; j<-1 to 3 if j!=i)println(i*j)

for推导式
scala的for结构可以在每次执行的时候创造一个值 然后将包含了所有产生值的集合作为for循环表达式的结果返回
集合的类型由生成器中的集合类型确定  通过for循环遍历一个或者多个集合，对集合元素进行推导 从而计算得到新的集合用于和后续的其他处理

for(变量<- 表达式)yield{语句块}
 var r=for(i<-1 to 5 if i%2==0)yield{println(i); i}
 ######
 1 to 5 定义了一个范围，包含从 1 到 5 的所有数字。
if % 2 == 0 是一个守卫条件，它过滤出满足条件的数字。在这里，我们使用 % 操作符来判断数字 i 是否为偶数。如果 i 除以 2 的余数等于 0，即 i 是偶数，它就会被保留。
yield 关键字将每次迭代的结果收集到一个新的集合中。在这里，我们通过 println(i) 打印出满足条件的数字 i，然后返回 i。
最后，r 变量将包含生成器的结果集合，其中只包含满足条件的偶数。此时，变量 r 的值将是一个包含满足条件的偶数的集合，即 [2, 4]。
######
使用 for 循环打印出 10 到 1 的倒序数字。
 for(i <-10 to 1 by -1){
    println(i)
    }
编写一个 for 循环，打印出 1 到 10 的数字的平方。
  for(i <-1 to 10 ){
      println(i*i)
    }
使用 for 循环找出 1 到 100 中所有能被 7 整除的数字。
 for(i <-1 to 100  if i%7==0){
      println(i)
    }
使用 for 循环打印出 1 到 10 的所有奇数。
   for(i <-1 to 10  if  i%2!=0){
      println(i)
    }

编写一个 for 循环，计算并打印出 1 到 10 的数字的阶乘。  1!=1*1 2!=2*1 3!=3*2*1
    var a = 1
    for (i <- 1 to 10) {
      a *= i
      printf("当%d的阶乘为%d \n",i,a)
    }

使用嵌套的 for 循环，打印出一个九九乘法表。
   for(i<-1 to 9 ){
      for (j<-1 to 9 ){
        val sum=i*j
       printf("%d*%d=%d \t",i,j,sum)
      }
      println()
    }

创建一个列表（List）包含 5 个整数，使用 for 循环计算并打印出这些整数的平方。

使用 for 循环遍历一个字符串，打印出字符串中的每个字符。
val str = "Hello, World!"
str.foreach(println)
####
 val str = "Hello, World!"
    for (i <- 0 until str.length) {
      val ch = str.charAt(i)
      println(ch)
    }